Service hierarchy
=================

Service		org.moblin.connman
Interface	org.moblin.connman.Service
Object path	[variable prefix]/{service0,service1,...}

Methods		dict GetProperties()

			Returns properties for the service object. See
			the properties section for available properties.

			Possible Errors: [service].Error.InvalidArguments

		void SetProperty(string name, variant value)

			Changes the value of the specified property. Only
			properties that are listed as read-write are
			changeable. On success a PropertyChanged signal
			will be emitted.

			Possible Errors: [service].Error.InvalidArguments
					 [service].Error.InvalidProperty

		void ClearProperty(string name)

			Clears the value of the specified property.

			Possible Errors: [service].Error.InvalidArguments
					 [service].Error.InvalidProperty

		void Connect()

			Connect this service. It will attempt to connect
			WiFi, WiMAX or Bluetooth services.

			For Ethernet devices this method can only be used
			if it has previously been disconnected. Otherwise
			the plugging of a cable will trigger connecting
			automatically. If no cable is plugged in this method
			will fail.

			This method call will only return in case of an
			error or when the service is fully connected. So
			setting a longer D-Bus timeout might be a really
			good idea.

			Possible Errors: [service].Error.InvalidArguments

		void Disconnect()

			Disconnect this service. If the service is not
			connected an error message will be generated.

			On Ethernet devices this will disconnect the IP
			details from the service. It will not magically
			unplug the cable. When no cable is plugged in this
			method will fail.

			This method can also be used to abort a previous
			connectiong attempt via the Connect method.

			Possible Errors: [service].Error.InvalidArguments

		void Remove()

			A successfully connected service with Favorite=true
			can be removed this way. If it is connected, it will
			be automatically disconnected first.

			If the service requires a passphrase it will be
			cleared and forgotten when removing.

			This is similar to setting the Favorite property
			to false, but that is currently not supported.

			Calling this method on Ethernet devices will cause
			an error message. It is not possible to remove these
			kind of devices.

			Possible Errors: [service].Error.InvalidArguments

		void MoveBefore(object service)

			If a service has been used before, this allows a
			reorder of the favorite services.

			The target service object must be part of this
			profile. Moving between profiles is not supported.

			Possible Errors: [service].Error.InvalidArguments

		void MoveAfter(object service)

			If a service has been used before, this allows a
			reorder of the favorite services.

			The target service object must be part of this
			profile. Moving between profiles is not supported.

			Possible Errors: [service].Error.InvalidArguments

Signals		PropertyChanged(string name, variant value)

			This signal indicates a changed value of the given
			property.

Properties	string State [readonly]

			The service state information.

			Valid states are "idle", "failure", "association",
			"configuration" and "ready".

		string Error [readonly]

			The service error status details.

			When error occur during connection or disconnection
			the detailed information are represented in this
			property to help the user interface to present the
			user with alternate options.

			This property is only valid when the service is in
			the "failure" state. Otherwise it might be empty or
			not present at all.

			Current defined error code is "dhcp-failed".

		string Name [readonly]

			The service name (for example "Wireless" etc.)

			This name can be used for directly displaying it in
			the application. It has pure informational purpose.

			For Ethernet devices and hidden WiFi networks it is
			not guaranteed that this property is present.

		string Type [readonly]

			The service type (for example "ethernet", "wifi" etc.)

			This information should only be used to determine
			advanced properties or showing the correct icon
			to the user.

		string Mode [readonly]

			If the service type is WiFi, then this property is
			present and contains the mode of the network. The
			possible values are "managed" or "adhoc".

			This property might be only present for WiFi
			services.

		string Security [readonly]

			If the service type is WiFi, then this property is
			present and contains the security method or key
			management setting.

			Possible values are "none", "wep", "wpa" and "rsn".

			This property might be only present for WiFi
			services.

		string Passphrase [readwrite]

			If the service type is WiFi, then this property
			can be used to store a passphrase.

			No PropertyChanged signals will be send for this
			property. The PassphraseRequired property should
			be monitored instead.

			This property might also not always be included
			since it is protected by a different security policy.

		boolean PassphraseRequired [readonly]

			If the service type is WiFi, then this property
			indicates if a passphrase is required.

			If a passphrase has been set already or if no
			passphrase is needed, then this property will
			be set to false.

		uint8 Strength [readonly]

			Indicates the signal strength of the service. This
			is a normalized value between 0 and 100.

			This property will not be present for Ethernet
			devices.

		boolean Favorite [readonly]

			Will be true if a cable is plugged in or the user
			selected and successfully connected to this service.

			This value is automatically changed and to revert
			it back to false the Remove() method needs to be
			used.

		boolean AutoConnect [readwrite]

			If set to true, this service will auto-connect
			when not other connection is available.

			For favorite services it is possible to change
			this value to prevent or permit automatic
			connection attempts.

		string IPv4.Method [readwrite]

			The IPv4 configuration method. Possible values here
			are "dhcp" and "static".

		string IPv4.Address [readwrite]

			The current configured IPv4 address.
