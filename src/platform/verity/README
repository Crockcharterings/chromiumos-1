This package implements a user-space filesystem with FUSE that
performs integrity checking at a per-page granularity while passing
through all normal operations to the underlying filesystem.  It expects
to have been verified before run so that it may trust the SHA-1
digest of the manifest file that is compiled in.

Authenticity, in addition, to integrity may be added, but verity
expects to be part of some form of chain of trust.

Additional extensions to verity may allow for robust failure modes
and direct interfacing with system update software, or even, remotely
hosted binaries.
TODO: spec out some future possibilities.

verity should be compiled statically.
needs libfuse2 libfuse-dev

NOTE: This is a proof of concept implementation for initial exploration.

Run in learning mode:
  ./verity --verity_learning_mode=true -log_dir=/tmp -alsologtostderr=true -stderrthreshold=0 --  /tmp/ro -f -o allow_other

Build a manifest from the results:
  ./scripts/build_manifest.sh /tmp/verity.INFO /tmp/manifest

Run enforcing:
  ./verity --verity_learning_mode=false --verity_manifest=/tmp/manifest --verity_manifest_digest=9f2c3812bacaf6cc1c656f7a2021bf1fabc82ed7 -log_dir=/tmp -alsologtostderr=true -stderrthreshold=0 --  /tmp/ro -f -o allow_other 2>&1   
