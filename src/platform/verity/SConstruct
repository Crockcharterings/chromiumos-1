# -*- python -*-

# Copyright (c) 2009 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os

env = Environment()

verity_sources = env.Split("""fuse_bridge.cc
                              digester.cc
                              openssl_digester.cc
                              verity.cc
                              verity_constants.cc
                              main.cc""")

#test_sources = env.Split("""""")

env.Append(
    CPPPATH=['..'],
    CCFLAGS=['-static', '-static-libgcc', '-pthread', '-O2',
             '-fno-strict-aliasing', '-fno-exceptions', '-Wall', '-Werror'],
    # TODO: make this statically link properly.
    LIBS=['c', 'pthread', 'dl', 'rt',
          File("/usr/lib/libgflags.a"),
          File("/usr/lib/libglog.a"),
          File("/usr/lib/libfuse.a"),
          File("/usr/lib/libcrypto.a"),
          File("/usr/lib/libssl.a"),
          #File("/usr/lib/libpthread.a"),
          #File("/usr/lib/libc.a"),
          #File("/usr/lib/libm.a"),
          #File("/usr/lib/librt.a"),
          # TODO: determine if fuse needs to dlopen. If so, we'll need to verify that too.
          #File("/usr/lib/libdl.a"),
          #File(os.popen("g++ -print-file-name=libstdc++.a").read().strip()),
         ]
)
env.Append(CPPDEFINES=['_FILE_OFFSET_BITS=64', 'NDEBUG'])

env_bin = env.Clone()
env_bin.Program('verity', verity_sources)

# TODO: tests
#env_test = env.Clone()
#env_test.Append(LIBS=['gtest', 'pcrecpp'])
#env_test.Program('verity_unittests', verity_sources + test_sources)
