#!/usr/bin/python

# Copyright (c) 2009 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import dbus
import sys
import time
import wifi2


def FindBestOpenNetwork():
  """Looks for open networks.

  We'll always pick GoogleGuest by default but in the absence of that we'll
  connect to the open AP with the highest signal strength.
  """
  available_networks = wifi2.Scan()
  best_network = None
  for key, value in available_networks.items():
    if value.has_key("encryption") and value["encryption"] == "none":
      if value["ssid"] == "GoogleGuest":
        best_network = value
        break
      elif best_network == None or value["signal"] >= best_network["signal"]:
        best_network = value
  return best_network

# Determines if Connman has settled by checking the current connection status.
# We will try this several times in the case of an exception since connman
# may not have been fully initialized yet.
success = False
attempts = 0
while not success and attempts < 60:
  try:
    print "checking connection status"
    wifi2.IsOnline()
    success = True
  except:
    print "D-Bus is not running,retrying in 300ms"
    attempts += 1
    time.sleep(.3)

if not success:
  print "Unable to determine connection status, aborting"
  sys.exit(1)

attempts = 0
best_network = None
while best_network == None and attempts <= 30:
    print "Scanning for networks"
    # Catch any excpetions that d-bus/connman throw and try again.
    try:
      best_network = FindBestOpenNetwork()
    except Exception, e:
      print "Error scanning for networks: %s" % e

    if best_network == None:
      print "unable to find networks, retrying in 300ms"
      time.sleep(.3)
      attempts += 1

if best_network == None:
  print "Unable to find an open network to connect to"
  sys.exit(0)

if wifi2.IsOnline() == True:
  print "Already connected, exiting"
  sys.exit(0)

print "Connecting to %s" % best_network["ssid"]
connected = False
retries = 0
while connected == False and retries < 5: 
  connected = wifi2.AddNetwork(best_network["ssid"])
  print "connection status is %s" % connected
  retries += 1

